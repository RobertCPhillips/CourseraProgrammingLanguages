(* Dan Grossman, Coursera PL, HW2 Provided Code *)

(* if you use this function to compare two strings (returns true if the same
   string), then you avoid several of the functions in problem 1 having
   polymorphic types that may be confusing *)
fun same_string(s1 : string, s2 : string) =
    s1 = s2

(******************* put your solutions for problem 1 here *******************)

(*****1a*****)
fun all_except_option(s, lst) = 
  case lst of 
    [] => NONE
  | hd::tl => if same_string(s,hd)
              then SOME(tl)
              else case all_except_option(s, tl) of
                NONE => NONE
	          | SOME(x) => SOME(hd::x)

(*****1b*****)
fun get_substitutions1(lst, s) =
  case lst of 
    [] => []
  | hd::tl => case all_except_option(s, hd) of
                NONE => get_substitutions1(tl, s)
              | SOME(x) => x@get_substitutions1(tl, s)

(*****1c*****)
fun get_substitutions2(lst, s) =
  let
    fun get_substitutions2Acc(lstAcc, acc) = 
      case lstAcc of 
        [] => acc
      | hd::tl => case all_except_option(s, hd) of
                    NONE => get_substitutions2Acc(tl, acc)
                  | SOME(x) => get_substitutions2Acc(tl, acc@x)
  in
    get_substitutions2Acc(lst, [])
  end

(*
 Write a function similar_names, which takes a string list list of substitutions (as in parts (b) and (c)) and a full name of type {first:string,middle:string,last:string} and returns a list of full names (type {first:string,middle:string,last:string} list). 
 
 The result is all the full names you can produce by substituting for the ﬁrst name (and only the ﬁrst name) using substitutions and parts (b) or (c). The answer should begin with the original name (then have 0 or more other names). 
 
 Example: 
 
 similar_names([["Fred","Fredrick"],["Elizabeth","Betty"],["Freddie","Fred","F"]], {first="Fred", middle="W", last="Smith"}) 
 
 answer: [{first="Fred", last="Smith", middle="W"}, {first="Fredrick", last="Smith", middle="W"}, {first="Freddie", last="Smith", middle="W"}, {first="F", last="Smith", middle="W"}]

*)
(*****1d*****)
type fullName = {first:string, middle:string, last:string}

fun similar_names(lst, name:fullName) = 
  case name of 
    {first=f,middle=m,last=l} => 
      let
        val nicknames = get_substitutions2(lst, f)
        
        fun similar_namesAcc(lstAcc, acc) = 
          case lstAcc of
            [] => acc
          | hd::tl => similar_namesAcc(tl, acc@[{first=hd,middle=m,last=l}]) 
      in
        similar_namesAcc(nicknames, [name])
      end
  
(* you may assume that Num is always used with values 2, 3, ..., 10
   though it will not really come up *)
datatype suit = Clubs | Diamonds | Hearts | Spades
datatype rank = Jack | Queen | King | Ace | Num of int 
type card = suit * rank

datatype color = Red | Black
datatype move = Discard of card | Draw 

exception IllegalMove

(* put your solutions for problem 2 here *)

(*
(a) Write a function card_color, which takes a card and returns its color (spades and clubs are black, diamonds and hearts are red). Note: One case-expression is enough.
*)
fun card_color(theCard) =
  case theCard of
  |  Spades => Black
  |  Clubs => Black
  |  Diamonds => Red
  |  Hearts => Red  

(*
(b) Write a function card_value, which takes a card and returns its value (numbered cards have their number as the value, aces are 11, everything else is 10). Note: One case-expression is enough.
*)
